import { describe, it, expect } from 'vitest'
import { generator, getConfig, type Config } from '../src'
import fs from 'fs/promises'

async function setupConfig(folder: string) {
  const dir = process.cwd() + `/tests/${folder}`
  const config = await getConfig({
    routesDirectory: dir + '/routes',
    generatedRouteTree: dir + '/routeTree.gen.ts',
  })
  return config
}

function getRouteTreeFileText(config: Config) {
  const location = config.generatedRouteTree
  const text = fs.readFile(location, 'utf-8')
  return text
}

// Write a test
describe('with a default config', () => {
  it('should wire-up routes for a "single-level" tree', async () => {
    const config = await setupConfig('single-level')
    await generator(config)
    const routeTree = await getRouteTreeFileText(config)
    expect(routeTree).equal(`/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsImport } from './routes/posts'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const PostsRoute = PostsImport.update({
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([IndexRoute, PostsRoute])

/* prettier-ignore-end */
`)
  })
})
