/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as StatusImport } from './routes/status'
import { Route as SearchParamsImport } from './routes/search-params'
import { Route as RedirectImport } from './routes/redirect'
import { Route as PostsImport } from './routes/posts'
import { Route as NestedDocsImport } from './routes/nested-docs'
import { Route as DeferredImport } from './routes/deferred'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users.index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as NestedDocsIndexImport } from './routes/nested-docs.index'
import { Route as UsersUserIdImport } from './routes/users.$userId'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as LayoutLayout2Import } from './routes/_layout/_layout-2'
import { Route as NestedDocsProjectIndexImport } from './routes/nested-docs.$project.index'
import { Route as PostsPostIdDeepImport } from './routes/posts_.$postId.deep'
import { Route as LayoutLayout2LayoutBImport } from './routes/_layout/_layout-2/layout-b'
import { Route as LayoutLayout2LayoutAImport } from './routes/_layout/_layout-2/layout-a'
import { Route as NestedDocsProjectVersionIndexImport } from './routes/nested-docs.$project.$version.index'
import { Route as NestedDocsProjectVersionDocsFrameworkFrameworkImport } from './routes/nested-docs.$project.$version.docs.framework.$framework'
import { Route as NestedDocsProjectVersionDocsFrameworkFrameworkIndexImport } from './routes/nested-docs.$project.$version.docs.framework.$framework.index'
import { Route as NestedDocsProjectVersionDocsFrameworkFrameworkSplatImport } from './routes/nested-docs.$project.$version.docs.framework.$framework.$'

// Create/Update Routes

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const StatusRoute = StatusImport.update({
  id: '/status',
  path: '/status',
  getParentRoute: () => rootRoute,
} as any)

const SearchParamsRoute = SearchParamsImport.update({
  id: '/search-params',
  path: '/search-params',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const NestedDocsRoute = NestedDocsImport.update({
  id: '/nested-docs',
  path: '/nested-docs',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const NestedDocsIndexRoute = NestedDocsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NestedDocsRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

const LayoutLayout2Route = LayoutLayout2Import.update({
  id: '/_layout-2',
  getParentRoute: () => LayoutRoute,
} as any)

const NestedDocsProjectIndexRoute = NestedDocsProjectIndexImport.update({
  id: '/$project/',
  path: '/$project/',
  getParentRoute: () => NestedDocsRoute,
} as any)

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRoute,
} as any)

const LayoutLayout2LayoutBRoute = LayoutLayout2LayoutBImport.update({
  id: '/layout-b',
  path: '/layout-b',
  getParentRoute: () => LayoutLayout2Route,
} as any)

const LayoutLayout2LayoutARoute = LayoutLayout2LayoutAImport.update({
  id: '/layout-a',
  path: '/layout-a',
  getParentRoute: () => LayoutLayout2Route,
} as any)

const NestedDocsProjectVersionIndexRoute =
  NestedDocsProjectVersionIndexImport.update({
    id: '/$project/$version/',
    path: '/$project/$version/',
    getParentRoute: () => NestedDocsRoute,
  } as any)

const NestedDocsProjectVersionDocsFrameworkFrameworkRoute =
  NestedDocsProjectVersionDocsFrameworkFrameworkImport.update({
    id: '/$project/$version/docs/framework/$framework',
    path: '/$project/$version/docs/framework/$framework',
    getParentRoute: () => NestedDocsRoute,
  } as any)

const NestedDocsProjectVersionDocsFrameworkFrameworkIndexRoute =
  NestedDocsProjectVersionDocsFrameworkFrameworkIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => NestedDocsProjectVersionDocsFrameworkFrameworkRoute,
  } as any)

const NestedDocsProjectVersionDocsFrameworkFrameworkSplatRoute =
  NestedDocsProjectVersionDocsFrameworkFrameworkSplatImport.update({
    id: '/$',
    path: '/$',
    getParentRoute: () => NestedDocsProjectVersionDocsFrameworkFrameworkRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/nested-docs': {
      id: '/nested-docs'
      path: '/nested-docs'
      fullPath: '/nested-docs'
      preLoaderRoute: typeof NestedDocsImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/search-params': {
      id: '/search-params'
      path: '/search-params'
      fullPath: '/search-params'
      preLoaderRoute: typeof SearchParamsImport
      parentRoute: typeof rootRoute
    }
    '/status': {
      id: '/status'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof StatusImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_layout-2': {
      id: '/_layout/_layout-2'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutLayout2Import
      parentRoute: typeof LayoutImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof UsersImport
    }
    '/nested-docs/': {
      id: '/nested-docs/'
      path: '/'
      fullPath: '/nested-docs/'
      preLoaderRoute: typeof NestedDocsIndexImport
      parentRoute: typeof NestedDocsImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof UsersImport
    }
    '/_layout/_layout-2/layout-a': {
      id: '/_layout/_layout-2/layout-a'
      path: '/layout-a'
      fullPath: '/layout-a'
      preLoaderRoute: typeof LayoutLayout2LayoutAImport
      parentRoute: typeof LayoutLayout2Import
    }
    '/_layout/_layout-2/layout-b': {
      id: '/_layout/_layout-2/layout-b'
      path: '/layout-b'
      fullPath: '/layout-b'
      preLoaderRoute: typeof LayoutLayout2LayoutBImport
      parentRoute: typeof LayoutLayout2Import
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepImport
      parentRoute: typeof rootRoute
    }
    '/nested-docs/$project/': {
      id: '/nested-docs/$project/'
      path: '/$project'
      fullPath: '/nested-docs/$project'
      preLoaderRoute: typeof NestedDocsProjectIndexImport
      parentRoute: typeof NestedDocsImport
    }
    '/nested-docs/$project/$version/': {
      id: '/nested-docs/$project/$version/'
      path: '/$project/$version'
      fullPath: '/nested-docs/$project/$version'
      preLoaderRoute: typeof NestedDocsProjectVersionIndexImport
      parentRoute: typeof NestedDocsImport
    }
    '/nested-docs/$project/$version/docs/framework/$framework': {
      id: '/nested-docs/$project/$version/docs/framework/$framework'
      path: '/$project/$version/docs/framework/$framework'
      fullPath: '/nested-docs/$project/$version/docs/framework/$framework'
      preLoaderRoute: typeof NestedDocsProjectVersionDocsFrameworkFrameworkImport
      parentRoute: typeof NestedDocsImport
    }
    '/nested-docs/$project/$version/docs/framework/$framework/$': {
      id: '/nested-docs/$project/$version/docs/framework/$framework/$'
      path: '/$'
      fullPath: '/nested-docs/$project/$version/docs/framework/$framework/$'
      preLoaderRoute: typeof NestedDocsProjectVersionDocsFrameworkFrameworkSplatImport
      parentRoute: typeof NestedDocsProjectVersionDocsFrameworkFrameworkImport
    }
    '/nested-docs/$project/$version/docs/framework/$framework/': {
      id: '/nested-docs/$project/$version/docs/framework/$framework/'
      path: '/'
      fullPath: '/nested-docs/$project/$version/docs/framework/$framework/'
      preLoaderRoute: typeof NestedDocsProjectVersionDocsFrameworkFrameworkIndexImport
      parentRoute: typeof NestedDocsProjectVersionDocsFrameworkFrameworkImport
    }
  }
}

// Create and export the route tree

interface LayoutLayout2RouteChildren {
  LayoutLayout2LayoutARoute: typeof LayoutLayout2LayoutARoute
  LayoutLayout2LayoutBRoute: typeof LayoutLayout2LayoutBRoute
}

const LayoutLayout2RouteChildren: LayoutLayout2RouteChildren = {
  LayoutLayout2LayoutARoute: LayoutLayout2LayoutARoute,
  LayoutLayout2LayoutBRoute: LayoutLayout2LayoutBRoute,
}

const LayoutLayout2RouteWithChildren = LayoutLayout2Route._addFileChildren(
  LayoutLayout2RouteChildren,
)

interface LayoutRouteChildren {
  LayoutLayout2Route: typeof LayoutLayout2RouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutLayout2Route: LayoutLayout2RouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface NestedDocsProjectVersionDocsFrameworkFrameworkRouteChildren {
  NestedDocsProjectVersionDocsFrameworkFrameworkSplatRoute: typeof NestedDocsProjectVersionDocsFrameworkFrameworkSplatRoute
  NestedDocsProjectVersionDocsFrameworkFrameworkIndexRoute: typeof NestedDocsProjectVersionDocsFrameworkFrameworkIndexRoute
}

const NestedDocsProjectVersionDocsFrameworkFrameworkRouteChildren: NestedDocsProjectVersionDocsFrameworkFrameworkRouteChildren =
  {
    NestedDocsProjectVersionDocsFrameworkFrameworkSplatRoute:
      NestedDocsProjectVersionDocsFrameworkFrameworkSplatRoute,
    NestedDocsProjectVersionDocsFrameworkFrameworkIndexRoute:
      NestedDocsProjectVersionDocsFrameworkFrameworkIndexRoute,
  }

const NestedDocsProjectVersionDocsFrameworkFrameworkRouteWithChildren =
  NestedDocsProjectVersionDocsFrameworkFrameworkRoute._addFileChildren(
    NestedDocsProjectVersionDocsFrameworkFrameworkRouteChildren,
  )

interface NestedDocsRouteChildren {
  NestedDocsIndexRoute: typeof NestedDocsIndexRoute
  NestedDocsProjectIndexRoute: typeof NestedDocsProjectIndexRoute
  NestedDocsProjectVersionIndexRoute: typeof NestedDocsProjectVersionIndexRoute
  NestedDocsProjectVersionDocsFrameworkFrameworkRoute: typeof NestedDocsProjectVersionDocsFrameworkFrameworkRouteWithChildren
}

const NestedDocsRouteChildren: NestedDocsRouteChildren = {
  NestedDocsIndexRoute: NestedDocsIndexRoute,
  NestedDocsProjectIndexRoute: NestedDocsProjectIndexRoute,
  NestedDocsProjectVersionIndexRoute: NestedDocsProjectVersionIndexRoute,
  NestedDocsProjectVersionDocsFrameworkFrameworkRoute:
    NestedDocsProjectVersionDocsFrameworkFrameworkRouteWithChildren,
}

const NestedDocsRouteWithChildren = NestedDocsRoute._addFileChildren(
  NestedDocsRouteChildren,
)

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

interface UsersRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutLayout2RouteWithChildren
  '/deferred': typeof DeferredRoute
  '/nested-docs': typeof NestedDocsRouteWithChildren
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/search-params': typeof SearchParamsRoute
  '/status': typeof StatusRoute
  '/users': typeof UsersRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/nested-docs/': typeof NestedDocsIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/layout-a': typeof LayoutLayout2LayoutARoute
  '/layout-b': typeof LayoutLayout2LayoutBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/nested-docs/$project': typeof NestedDocsProjectIndexRoute
  '/nested-docs/$project/$version': typeof NestedDocsProjectVersionIndexRoute
  '/nested-docs/$project/$version/docs/framework/$framework': typeof NestedDocsProjectVersionDocsFrameworkFrameworkRouteWithChildren
  '/nested-docs/$project/$version/docs/framework/$framework/$': typeof NestedDocsProjectVersionDocsFrameworkFrameworkSplatRoute
  '/nested-docs/$project/$version/docs/framework/$framework/': typeof NestedDocsProjectVersionDocsFrameworkFrameworkIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutLayout2RouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/search-params': typeof SearchParamsRoute
  '/status': typeof StatusRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/nested-docs': typeof NestedDocsIndexRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/layout-a': typeof LayoutLayout2LayoutARoute
  '/layout-b': typeof LayoutLayout2LayoutBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/nested-docs/$project': typeof NestedDocsProjectIndexRoute
  '/nested-docs/$project/$version': typeof NestedDocsProjectVersionIndexRoute
  '/nested-docs/$project/$version/docs/framework/$framework/$': typeof NestedDocsProjectVersionDocsFrameworkFrameworkSplatRoute
  '/nested-docs/$project/$version/docs/framework/$framework': typeof NestedDocsProjectVersionDocsFrameworkFrameworkIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/nested-docs': typeof NestedDocsRouteWithChildren
  '/posts': typeof PostsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/search-params': typeof SearchParamsRoute
  '/status': typeof StatusRoute
  '/users': typeof UsersRouteWithChildren
  '/_layout/_layout-2': typeof LayoutLayout2RouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/nested-docs/': typeof NestedDocsIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/_layout/_layout-2/layout-a': typeof LayoutLayout2LayoutARoute
  '/_layout/_layout-2/layout-b': typeof LayoutLayout2LayoutBRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
  '/nested-docs/$project/': typeof NestedDocsProjectIndexRoute
  '/nested-docs/$project/$version/': typeof NestedDocsProjectVersionIndexRoute
  '/nested-docs/$project/$version/docs/framework/$framework': typeof NestedDocsProjectVersionDocsFrameworkFrameworkRouteWithChildren
  '/nested-docs/$project/$version/docs/framework/$framework/$': typeof NestedDocsProjectVersionDocsFrameworkFrameworkSplatRoute
  '/nested-docs/$project/$version/docs/framework/$framework/': typeof NestedDocsProjectVersionDocsFrameworkFrameworkIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/deferred'
    | '/nested-docs'
    | '/posts'
    | '/redirect'
    | '/search-params'
    | '/status'
    | '/users'
    | '/posts/$postId'
    | '/users/$userId'
    | '/nested-docs/'
    | '/posts/'
    | '/users/'
    | '/layout-a'
    | '/layout-b'
    | '/posts/$postId/deep'
    | '/nested-docs/$project'
    | '/nested-docs/$project/$version'
    | '/nested-docs/$project/$version/docs/framework/$framework'
    | '/nested-docs/$project/$version/docs/framework/$framework/$'
    | '/nested-docs/$project/$version/docs/framework/$framework/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/deferred'
    | '/redirect'
    | '/search-params'
    | '/status'
    | '/posts/$postId'
    | '/users/$userId'
    | '/nested-docs'
    | '/posts'
    | '/users'
    | '/layout-a'
    | '/layout-b'
    | '/posts/$postId/deep'
    | '/nested-docs/$project'
    | '/nested-docs/$project/$version'
    | '/nested-docs/$project/$version/docs/framework/$framework/$'
    | '/nested-docs/$project/$version/docs/framework/$framework'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/deferred'
    | '/nested-docs'
    | '/posts'
    | '/redirect'
    | '/search-params'
    | '/status'
    | '/users'
    | '/_layout/_layout-2'
    | '/posts/$postId'
    | '/users/$userId'
    | '/nested-docs/'
    | '/posts/'
    | '/users/'
    | '/_layout/_layout-2/layout-a'
    | '/_layout/_layout-2/layout-b'
    | '/posts_/$postId/deep'
    | '/nested-docs/$project/'
    | '/nested-docs/$project/$version/'
    | '/nested-docs/$project/$version/docs/framework/$framework'
    | '/nested-docs/$project/$version/docs/framework/$framework/$'
    | '/nested-docs/$project/$version/docs/framework/$framework/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  DeferredRoute: typeof DeferredRoute
  NestedDocsRoute: typeof NestedDocsRouteWithChildren
  PostsRoute: typeof PostsRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  SearchParamsRoute: typeof SearchParamsRoute
  StatusRoute: typeof StatusRoute
  UsersRoute: typeof UsersRouteWithChildren
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  DeferredRoute: DeferredRoute,
  NestedDocsRoute: NestedDocsRouteWithChildren,
  PostsRoute: PostsRouteWithChildren,
  RedirectRoute: RedirectRoute,
  SearchParamsRoute: SearchParamsRoute,
  StatusRoute: StatusRoute,
  UsersRoute: UsersRouteWithChildren,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/deferred",
        "/nested-docs",
        "/posts",
        "/redirect",
        "/search-params",
        "/status",
        "/users",
        "/posts_/$postId/deep"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/_layout-2"
      ]
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/nested-docs": {
      "filePath": "nested-docs.tsx",
      "children": [
        "/nested-docs/",
        "/nested-docs/$project/",
        "/nested-docs/$project/$version/",
        "/nested-docs/$project/$version/docs/framework/$framework"
      ]
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/search-params": {
      "filePath": "search-params.tsx"
    },
    "/status": {
      "filePath": "status.tsx"
    },
    "/users": {
      "filePath": "users.tsx",
      "children": [
        "/users/$userId",
        "/users/"
      ]
    },
    "/_layout/_layout-2": {
      "filePath": "_layout/_layout-2.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/_layout-2/layout-a",
        "/_layout/_layout-2/layout-b"
      ]
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/users/$userId": {
      "filePath": "users.$userId.tsx",
      "parent": "/users"
    },
    "/nested-docs/": {
      "filePath": "nested-docs.index.tsx",
      "parent": "/nested-docs"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/users/": {
      "filePath": "users.index.tsx",
      "parent": "/users"
    },
    "/_layout/_layout-2/layout-a": {
      "filePath": "_layout/_layout-2/layout-a.tsx",
      "parent": "/_layout/_layout-2"
    },
    "/_layout/_layout-2/layout-b": {
      "filePath": "_layout/_layout-2/layout-b.tsx",
      "parent": "/_layout/_layout-2"
    },
    "/posts_/$postId/deep": {
      "filePath": "posts_.$postId.deep.tsx"
    },
    "/nested-docs/$project/": {
      "filePath": "nested-docs.$project.index.tsx",
      "parent": "/nested-docs"
    },
    "/nested-docs/$project/$version/": {
      "filePath": "nested-docs.$project.$version.index.tsx",
      "parent": "/nested-docs"
    },
    "/nested-docs/$project/$version/docs/framework/$framework": {
      "filePath": "nested-docs.$project.$version.docs.framework.$framework.tsx",
      "parent": "/nested-docs",
      "children": [
        "/nested-docs/$project/$version/docs/framework/$framework/$",
        "/nested-docs/$project/$version/docs/framework/$framework/"
      ]
    },
    "/nested-docs/$project/$version/docs/framework/$framework/$": {
      "filePath": "nested-docs.$project.$version.docs.framework.$framework.$.tsx",
      "parent": "/nested-docs/$project/$version/docs/framework/$framework"
    },
    "/nested-docs/$project/$version/docs/framework/$framework/": {
      "filePath": "nested-docs.$project.$version.docs.framework.$framework.index.tsx",
      "parent": "/nested-docs/$project/$version/docs/framework/$framework"
    }
  }
}
ROUTE_MANIFEST_END */
